/*
@author: Darshika
@Question Link: https://leetcode.com/problems/largest-divisible-subset/
@Time Complexity: O(nLogn) +O(n^2)+O(n) ~ O(n^2)
@Space Complexity: O(n)
*/

class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {//[2,3,4,8]
        //sort the array
        Arrays.sort(nums);//[2,3,4,8]
        //find largest increasing divisible subset length
        int max = 1;
        int[] dp = new int[nums.length]; //[0,0,0,0]
        Arrays.fill(dp,1); //[1,1,2,3]
        for(int i = 1;i<nums.length;i++){//i=3
            for(int j = 0;j<i;j++){//j=2
                if(nums[i]%nums[j] == 0 && dp[i]<dp[j]+1){
                    dp[i] = dp[j]+1;
                }
            }
            max = Math.max(dp[i],max);//3
        }
        //find the subset        
        List<Integer> res = new ArrayList<>();//[8,4]
        int prev=-1;
        for(int i = nums.length-1;i>=0&&max>0;i--){//i=1
            if(dp[i] == max && (prev%nums[i] == 0 || prev == -1)){
                res.add(nums[i]);
                max--;//1
                prev = nums[i];
            }
        }
        return res;
    }
}
