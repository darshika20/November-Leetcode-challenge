/*
@author: Darshika
@Question Link: https://leetcode.com/problems/largest-component-size-by-common-factor/
*/

class Solution {
    private int[] parent;
    
    private int getAbsoluteParent(int val){
        if(parent[val] == val){
            return val;
        }
        parent[val] = getAbsoluteParent(parent[val]);
        return parent[val];
    }
    
    private void unify(int i,int j){        
        int ip = getAbsoluteParent(i);
        int jp = getAbsoluteParent(j);
        
        if(ip != jp){
            parent[jp] = ip ;
        }
    }
    
    public int largestComponentSize(int[] nums) {
        //Map<Integer,Integer> parent = new HashMap<>();
        int max = 0;
        for(int val : nums){
            max = Math.max(val,max);
        }
        
        parent = new int[max+1];
        
        for(int i = 0;i<=max;i++){
            parent[i] = i;
        }
        
        for(int val : nums){
            for(int i = 2;i*i<=val;i++){
                if(val%i==0){
                    unify(i,val);
                    unify(val/i,val);
                }
                
            }
            
        }
        
        Map<Integer,Integer> cache = new HashMap<>();
        max = 0;
        for(int val : nums){
            int mp = getAbsoluteParent(val);
            //System.out.println(val+" "+mp);
            // if(cache.containsKey(mp)){
            //     cache.put()
            // }
            cache.put(mp,cache.getOrDefault(mp,0)+1);
            max = Math.max(max,cache.get(mp));
        }
        
        return max;
    }
}
