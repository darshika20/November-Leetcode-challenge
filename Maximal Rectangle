/*
@author: Darshika
@Qustion Link: https://leetcode.com/problems/maximal-rectangle/
@Time Complexity: O(n)
@Space Complexity: O(n)
*/

class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix.length==0){
            return 0;
        }
        int[] histogram = new int[matrix[0].length];
        int maxarea = 0;
        for(int i = 0;i<matrix.length;i++){
            for(int j = 0;j<matrix[0].length;j++){
                char ch = matrix[i][j];
                if(ch == '1'){
                    histogram[j]++;
                }else{
                    histogram[j] = 0;
                }
            }
            maxarea = Math.max(maxarea,findMaxHistogramArea(histogram));
        }
        return maxarea;
    }
    
    private int findMaxHistogramArea(int[] arr){
        Stack<Integer> st = new Stack<>();
        int[] leftmin = new int[arr.length];
        int[] rightmin = new int[arr.length];
        int max = 0;
        
        for(int i = 0;i<arr.length;i++){
            while(st.size() != 0 && arr[st.peek()] >= arr[i]){
                st.pop();
            } 
            if(st.size() == 0){
                leftmin[i] = 0;
            }else{
                leftmin[i] = st.peek()+1;
            }
            st.push(i);
        }
        
        st.clear();
        
        for(int i = arr.length-1;i>=0;i--){
            while(st.size()>0 && arr[st.peek()] >= arr[i]){
                st.pop();
            }
            if(st.size() == 0){
                rightmin[i] = arr.length-1;
            }else{
                rightmin[i] = st.peek()-1;
            }
            st.push(i);
        }
        
        for(int i = 0;i<arr.length;i++){
            int area = (rightmin[i]-leftmin[i]+1)*arr[i];
            max = Math.max(area,max);
        }
        
        return max;
        
    }
}
