/*
@author: Darshika
@Question Link: https://leetcode.com/problems/delete-node-in-a-bst/
@Time Complexity: O(h)
@Space Complexity: O(1)
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        TreeNode dummy = root;
        if(root == null){
            return null;
        }else if(root.val == key){
            return helper(root);
        }else{
            while(root != null){
                if(root.val > key){
                    if(root.left != null && root.left.val == key){                        
                        root.left = helper(root.left);                        
                        return dummy;
                    }
                    root = root.left;
                }else{
                    if(root.right != null && root.right.val == key){
                        root.right = helper(root.right);
                        return dummy;
                    }
                    root = root.right;
                }
            }
            return dummy;
        }
        
    }
    
    private TreeNode helper(TreeNode root){
        if(root.left == null){
            return root.right;
        }else if(root.right == null){
            return root.left;
        }else{
            TreeNode rightChild = root.right;
            TreeNode rightMostChild = findRight(root.left);
            rightMostChild.right = rightChild;
            
            return root.left;
        }
    }
    
    private TreeNode findRight(TreeNode root){
        if(root.right == null){
            return root;
        }
        return findRight(root.right);
    }
}
